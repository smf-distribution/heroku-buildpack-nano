#!/bin/bash
# bin/compile <build-dir> <cache-dir> <env-dir>

## Fail immediately on non-zero exit code.
set -e
## Fail immediately on non-zero exit code within a pipeline.
set -o pipefail

readonly BUILD_DIR="${1:-}"
readonly CACHE_DIR="${2:-}"
readonly ENV_DIR="${3:-}"

export_env_dir() {
  env_dir=$1
  whitelist_regex=${2:-'^(NANO_URL_CUSTOM)$'}
  blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

export_env_dir $ENV_DIR

if [ -z "$NANO_URL_CUSTOM" ]; then
  echo "    -> Custom nano URL is not set, start downloading from default location"
  NANO_FILENAME='nano.tar.gz'
  NANO_URL="https://github.com/smf-distribution/heroku-buildpack-nano/raw/master/$NANO_FILENAME"
else
  NANO_FILENAME=$(basename $NANO_URL_CUSTOM)
  NANO_URL="$NANO_URL_CUSTOM"
fi

rm -rfv "$CACHE_DIR/$NANO_FILENAME"

echo "    -> Downloading Nano... (${NANO_URL})"

curl --retry 2 --silent --max-time 60 --location "${NANO_URL}" --output "${CACHE_DIR}/${NANO_FILENAME}"

# install
echo "    -> Installing Nano..."

mkdir -p "$BUILD_DIR/vendor/nano"
tar -xf "${CACHE_DIR}/${NANO_FILENAME}" -C "${BUILD_DIR}/vendor/nano"

# export
PROFILE_PATH="$BUILD_DIR/.profile.d/nano.sh"
mkdir -p $(dirname $PROFILE_PATH)
echo 'export PATH=$PATH:/app/vendor/nano' >> $PROFILE_PATH

echo "    DONE"
